#!/usr/bin/env bash
set -e

this_dir="$(dirname "$0")"
. "$this_dir/lib"

usage() {
	# print usage instructions for this digitalocean-exitnode script
	# if it's a symlink, you dont need to specify <droplet_name>
	command_start=$([ -h $0 ] \
		&& echo "$0" \
		|| echo "$0 <droplet_name>" \
	)
	cat <<-END
	Usage:
		$command_start [command] [options]
		$command_start up
		$command_start status
		$command_start down [-f]

	Commands:
		up   				create/launch the exitnode
		down				delete the exitnode

	Options:
		-h| --help			print this help text
		-f   				force deletion, i.e. dont ask for confirmation
	END
}

DO_EXITNODE_SIZE=${DO_EXITNODE_SIZE:-"512mb"}
DO_EXITNODE_REGION=${DO_EXITNODE_REGION:-"nyc3"}
DO_EXITNODE_DOCTL_DROPLET_CREATE_ARGS=${DO_EXITNODE_DOCTL_DROPLET_CREATE_ARGS:-""}
DO_EXITNODE_SSH_PUBLIC_KEY_FILE=${DO_EXITNODE_SSH_PUBLIC_KEY_FILE:-"$HOME/.ssh/id_rsa.pub"}
if [[ -z "$DO_EXITNODE_SSH_KEY_FINGERPRINT" ]] && ! test -f "$DO_EXITNODE_SSH_PUBLIC_KEY_FILE"; then
	echo "private key file does not exist: $DO_EXITNODE_SSH_PUBLIC_KEY_FILE"
	echo "specify DO_EXITNODE_SSH_KEY_FINGERPRINT or existent DO_EXITNODE_SSH_PUBLIC_KEY_FILE"
	exit 1
fi
DO_EXITNODE_SSH_KEY_FINGERPRINT=${DO_EXITNODE_SSH_KEY_FINGERPRINT:-""}
DO_EXITNODE_IMAGE=${DO_EXITNODE_IMAGE:-"debian-8-x64"}

ssh_key_fingerprint() {
	ssh_key_file="$1"
	case "$(uname)" in
		Darwin) fingerprint="$(ssh-keygen -Emd5 -lf "$ssh_key_file" | cut -d' ' -f2 | cut -d':' -f2- )"
			;;
		*)
			# tested on debian jessie. Doesn't have -Emd5 like on mac
			fingerprint="$(ssh-keygen -lf "$ssh_key_file" | cut -d' ' -f 2)"
			;;
	esac
	echo "$fingerprint"
}

main() {
	debug_echo "main($@) $#"
	if [[ "$#" == "0" ]]; then
		usage
	fi

	if [ -h "$0" ]; then
		# this file is a symlink, which means we'll treat its filename as the droplet name
		name="$(basename $0)"
	elif [ "$#" -gt "1" ]; then
		# not symlink, get droplet name from first arg
		name="$1"
		shift
	fi
	
	# main entrypoint for this script
	# arg parsing inspired by https://stackoverflow.com/a/2875513
	while test $# != 0
	do
		case "$1" in
		list)
			command="doctl compute droplet list"
			;;
		test)
			args=${@:2}
			shift "$#"			
			command="_test "$args""
			;;
		up)
			# if no args are passed, default droplet name to name of this file
			args=${@:2}
			shift "$#"
			debug_echo "up name=$name args=$args"
			command="get_or_create_exitnode $name $args"
			;;
		down)
			args=${@:2}
			shift "$#"
			debug_echo "down name=$name args=$args"
			command="rm_exitnode $name $args"
			;;
		status)
			args=${@:2}
			shift "$#"
			debug_echo "name=$name args=$args"
			command="get_exitnode $name $args"
			;;
		configure)
			args=${@:2}
			shift "$#"
			debug_echo "down name=$name args=$args"
			command="configure_do_exitnode $name $args"
			;;
		-h|--help|help)
			usage
			exit
			;;
		--ben|--other)
			extra="$extra $1=$2"; shift ;;
		--) shift; break;;
		*)  
			unknown_arg "$1"
			was_unknown_arg=1
			;;
		esac
		shift || true
	done

	if [ "$was_unknown_arg" == 1 ]; then
		usage
	else
		$command
	fi
}

_test() {
# do a sanity check test of this script
	# set -x
	set -e

	debug_echo "_test($@)"
	test_vm_name="bengomesh-test-vm-0"

	debug_echo "testing up"
	main "$test_vm_name" up > /dev/null

	debug_echo "testing status"
	main "$test_vm_name" status > /dev/null

	debug_echo "testing down"
	main "$test_vm_name" down -f
}

get_exitnode() {
	debug_echo "get_exitnode($@)"
	name="$1"

	listed="$(doctl compute droplet list "$name")"
	num_droplets_with_name="$(echo "$listed" | sed 1d | wc -l | awk '{print $1}')"
	echo "$listed"
	[[ "$num_droplets_with_name" -gt "0" ]]
}

get_or_create_exitnode() {
	debug_echo "get_or_create_exitnode($@)"
	name="$1"
	if do_droplet_exists "$name"; then
		debug_echo "do droplet already exists"
		get_exitnode "$name"
	else
		debug_echo "droplet does not exist. need to create it"
		do_droplet_create "$@"
	fi
}

rm_exitnode() {
	# remove an exitnode droplet by name
	# Usage: rm_exitnode <droplet_name> [-f]
	# Options
	# 	-f			force removal. dont ask for permissions
	debug_echo "rm_exitnode($@)"
	name="$1"
	shift
	debug_echo "name=$name args=$@"
	while test $# != 0
	do
		case "$1" in
		-f)
			force=1
			;;
		*)  unknown_arg "$1"
			;;
		esac
		shift
	done
	doctl_delete_args=""
	if [ "$force" == "1" ]; then
		doctl_delete_args+="-f"
	fi
	debug_echo "doctl_delete_args=$doctl_delete_args"
	doctl compute droplet delete "$name" $doctl_delete_args
}

configure_do_exitnode() {
# ssh into a fresh debian installation and make it an exitnode
	debug_echo "configure_exitnode($@)"
	name="$1"
	args=${@:1}
	node_ip="$(get_exitnode "$name" | sed 1d | awk '{print $3}')"
	debug_echo "node_ip=$node_ip"
}

do_droplet_create() {
	do_droplet_create_usage() {
		cat <<-END
		Create a DigitalOcean Droplet (aka a Virtual Machine or instance)

		Usage:
			$0 <name> [extra_doctl_droplet_create_args]

		Options:
			<name>									Name given to droplet
			[extra_doctl_droplet_create_args]		Will be passed to \`doctl compute droplet create\`
		END
	}
	debug_echo "do_droplet_create($@)"
	name="$1"
	# echo "name=$name"
	args="${@:2}"
	_ssh_key_fingerprint=${DO_EXITNODE_SSH_KEY_FINGERPRINT:-"$(ssh_key_fingerprint $DO_EXITNODE_SSH_PUBLIC_KEY_FILE)"}
	doctl compute droplet create "$name" \
		--region "$DO_EXITNODE_REGION" \
		--image "$DO_EXITNODE_IMAGE" \
		--size "$DO_EXITNODE_SIZE" \
		--ssh-keys "$_ssh_key_fingerprint" \
		$DO_EXITNODE_DOCTL_DROPLET_CREATE_ARGS \
		--wait

	# while test $# != 0; do
	# 	case "$1" in
	# 	--name)
	# 		name=$2
	# 		shift 2
	# 		;;
	# 	esac
	# 	shift
	# done
	# echo "name=$name"
}

do_droplet_exists() {
# usage: do_droplet_exists <name>
	# echo "do_droplet_exists($@)"
	name="$1"
	num_droplets_with_name="$(doctl compute droplet list "$name" | sed 1d | wc -l | awk '{ print $1 }')"
	if [ "0" = "$num_droplets_with_name" ]; then
		false
	else
		true
	fi
}

unknown_arg() {
	echo "unknown_arg $@"
}

main "$@"
