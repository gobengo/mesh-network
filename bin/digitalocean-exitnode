#!/usr/bin/env bash

usage() {
	# print usage instructions for this digitalocean-exitnode script
	# if it's a symlink, you dont need to specify <droplet_name>
	command_start=$([ -h $0 ] \
		&& echo "$0" \
		|| echo "$0 <droplet_name>" \
	)
	cat <<-END
	Usage:
		$command_start [command] [options]
		$command_start up
		$command_start down [-f]

	Commands:
		up						create/launch the exitnode
		down					delete the exitnode

	Options:
		-h| --help				print this help text
		-f						force deletion, i.e. dont ask for confirmation
	END
}

DO_EXITNODE_SIZE=${DO_EXITNODE_SIZE:-"512mb"}
DO_EXITNODE_REGION=${DO_EXITNODE_REGION:-"nyc3"}
DO_EXITNODE_DOCTL_DROPLET_CREATE_ARGS=${DO_EXITNODE_DOCTL_DROPLET_CREATE_ARGS:-""}
DO_EXITNODE_SSH_PRIVATE_KEY_FILE=${DO_EXITNODE_SSH_PRIVATE_KEY_FILE:-"$HOME/.ssh/id_rsa"}
# echo "DO_EXITNODE_SSH_PRIVATE_KEY_FILE=$DO_EXITNODE_SSH_PRIVATE_KEY_FILE"
_id_rsa_fingerprint="$(ssh-keygen -Emd5 -lf "$DO_EXITNODE_SSH_PRIVATE_KEY_FILE" | cut -d' ' -f2 | cut -d':' -f2- )"
DO_EXITNODE_SSH_KEY_FINGERPRINT=${DO_EXITNODE_SSH_KEY_FINGERPRINT:-"$_id_rsa_fingerprint"}
# echo "DO_EXITNODE_SSH_KEY_FINGERPRINT=$DO_EXITNODE_SSH_KEY_FINGERPRINT"
DO_EXITNODE_IMAGE=${DO_EXITNODE_IMAGE:-"debian-8-x64"}

debug_echo() {
	if [ "$DEBUG" != "" ]; then
	echo "$@"; fi }

main() {
	debug_echo "main($@) $#"
	if [[ "$#" == "0" ]]; then
		usage
	fi

	if [ -h "$0" ]; then
		# this file is a symlink, which means we'll treat its filename as the droplet name
		name="$(basename $0)"
	elif [ "$#" -gt "1" ]; then
		echo "$@"
		# not symlink, get droplet name from first arg
		name="$1"
		shift
	fi
	
	# main entrypoint for this script
	# arg parsing inspired by https://stackoverflow.com/a/2875513
	while test $# != 0
	do
		case "$1" in
		list)
			doctl compute droplet list
			;;
		test)
			_test "${@:2}"
			shift "$#"
			;;
		up)
			# if no args are passed, default droplet name to name of this file
			args=${@:2}
			debug_echo "up name=$name args=$args"
			get_or_create_exitnode $name $args
			shift "$#"
			;;
		down)
			args=${@:2}
			debug_echo "down name=$name args=$args"
			rm_exitnode $name $args
			shift "$#"
			;;
		status)
			args=${@:2}
			debug_echo "name=$name args=$args"
			get_exitnode $name $args
			shift "$#"
			;;
		# -A) all_into_one=t
		#     unpack_unreachable=--unpack-unreachable ;;
		-h|--help|help)
			usage
			exit
			;;
		--ben|--other)
			extra="$extra $1=$2"; shift ;;
		--) shift; break;;
		*)  
			unknown_arg "$1"
			was_unknown_arg=1
			;;
		esac
		shift
	done

	[ "$was_unknown_arg" == 1 ] && usage
}

_test() {
# do a sanity check test of this script
	echo "_test($@)"
	echo "testing up"
	main up
}

get_exitnode() {
	debug_echo "get_exitnode($@)"
	name="$1"
	doctl compute droplet list "$name"
}

get_or_create_exitnode() {
	debug_echo "get_or_create_exitnode($@)"
	name="$1"
	if do_droplet_exists "$name"; then
		debug_echo "do droplet already exists"
		get_exitnode "$name"
	else
		debug_echo "droplet does not exist. need to create it"
		do_droplet_create "$@"
	fi
}

rm_exitnode() {
	debug_echo "rm_exitnode($@)"
	name="$1"
	args=${@:1}
	while test $# != 0
	do
		case "$1" in
		-f)
			force=1
			;;
		*)  unknown_arg "$1"
			;;
		esac
		shift
	done
	doctl_delete_args=""
	if [ "$force" == "1" ]; then
		echo "its forcd"
		doctl_delete_args+="-f"
	fi
	echo "doctl_delete_args=$doctl_delete_args"
	echo "FINAL DELETE DROPLET name=$name force=$force"
	doctl compute droplet delete "$name" $doctl_delete_args
}

do_droplet_create() {
	do_droplet_create_usage() {
		cat <<-END
		Create a DigitalOcean Droplet (aka a Virtual Machine or instance)

		Usage:
			$0 <name> [extra_doctl_droplet_create_args]

		Options:
			<name>									Name given to droplet
			[extra_doctl_droplet_create_args]		Will be passed to \`doctl compute droplet create\`
		END
	}
	echo "do_droplet_create($@)"
	name="$1"
	# echo "name=$name"
	args="${@:2}"
	# use ~/.ssh/id_rsa key always.
	# @TODO(bengo.co): make this configurable
	ssh_key_fingerprint="$(ssh-keygen -Emd5 -lf ~/.ssh/id_rsa | cut -f2 -d' ')"
	doctl compute droplet create "$name" \
		--region "$DO_EXITNODE_REGION" \
		--image "$DO_EXITNODE_IMAGE" \
		--size "$DO_EXITNODE_SIZE" \
		--ssh-keys "$DO_EXITNODE_SSH_KEY_FINGERPRINT" \
		$DO_EXITNODE_DOCTL_DROPLET_CREATE_ARGS \
		--wait

	# while test $# != 0; do
	# 	case "$1" in
	# 	--name)
	# 		name=$2
	# 		shift 2
	# 		;;
	# 	esac
	# 	shift
	# done
	# echo "name=$name"
}

do_droplet_exists() {
# usage: do_droplet_exists <name>
	# echo "do_droplet_exists($@)"
	name="$1"
	num_droplets_with_name="$(doctl compute droplet list "$name" | sed 1d | wc -l | awk '{ print $1 }')"
	if [ "0" = "$num_droplets_with_name" ]; then
		echo "num_droplets_with_name is zero"
		false
	else
		true
	fi
}

unknown_arg() {
	echo "unknown_arg $@"
}

main "$@"
